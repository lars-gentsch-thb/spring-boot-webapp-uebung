# CI/CD Pipeline for Spring Boot Application

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build and test job
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Compile the project
      - name: Compile
        run: mvn clean compile

      # Run unit tests
      - name: Run Tests
        run: mvn test

      # Package the application
      - name: Package
        run: mvn package -DskipTests

      # Upload artifact for next job
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

  # Docker build and push job
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      # Checks-out your repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image using Jib
      - name: Build and push Docker image
        run: |
          mvn compile jib:build \
            -Djib.to.image=ghcr.io/${{ github.repository_owner }}/demo:${{ github.sha }} \
            -Djib.to.tags=latest \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }}

      # Output image details
      - name: Image Details
        run: |
          echo "Docker image pushed to: ghcr.io/${{ github.repository_owner }}/demo:${{ github.sha }}"
          echo "Also tagged as: ghcr.io/${{ github.repository_owner }}/demo:latest"
